// Invoked by `go generate` to generate synchashes.go.
// +build ignore

package main

import (
	"bufio"
	"crypto/sha1"
	"encoding/hex"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"
)

var tmpl = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package main

var SyncHashes = map[string]struct{}{
{{- range $file, $hash := . }}
	"{{ $hash }}": struct{}{}, // {{ $file }}
{{- end }}
}
`))

// Generates the sha1 hash for the ramcontroller with the given filename.
func generateHash(filename string) (string, error) {
	h := sha1.New()
	for _, file := range []string{
		"../bizhawk-co-op.lua",
		"../bizhawk-co-op/host.lua",
		"../bizhawk-co-op/messenger.lua",
		"../bizhawk-co-op/sync.lua",
		filename,
	} {
		f, err := os.Open(file)
		if err != nil {
			return "", err
		}
		defer f.Close()
		scanner := bufio.NewScanner(f)
		for scanner.Scan() {
			h.Write(scanner.Bytes())
			h.Write([]byte{'\n'})
		}
		if err := scanner.Err(); err != nil {
			return "", err
		}
	}
	return hex.EncodeToString(h.Sum(nil)), nil
}

// Computes the sha1 hashes for all ramcontrollers.
func computeHashes() (map[string]string, error) {
	dir := "../bizhawk-co-op/ramcontroller/"
	files, err := ioutil.ReadDir(dir)
	if err != nil {
		return nil, err
	}

	// Construct a map from filename to sha1 hash.
	hashes := make(map[string]string)
	for _, file := range files {
		if !strings.HasSuffix(file.Name(), ".lua") {
			continue
		}
		hash, err := generateHash(dir + file.Name())
		if err != nil {
			return nil, err
		}
		hashes[file.Name()] = hash
	}

	return hashes, nil
}

func main() {
	hashes, err := computeHashes()
	if err != nil {
		log.Fatal(err)
	}

	f, err := os.Create("synchashes.go")
	if err != nil {
		log.Fatal(err)
	}
	if err := tmpl.Execute(f, hashes); err != nil {
		log.Fatal(err)
	}
	if err := f.Close(); err != nil {
		log.Fatal(err)
	}
}
